@using Sandbox;
@using Sandbox.UI;
@using System.Threading.Tasks;
@inherits PanelComponent;

<root>
    <div class="title">Tab Menu</div>

    <!-- TODO this should be modularized -->
    <div class="main">
        <div class="side-bar">
            <div class="player-container">
                <div class="name">@(Rpc.Caller.DisplayName.Truncate(13))</div>
                <div class="sub">Salary:<span>$@(PlayerPrefab.Components.Get<PlayerStats>().SalaryAmmount.ToString("N0"))</span></div>
                <div class="wallet">$@(PlayerPrefab.Components.Get<PlayerStats>().MoneyBase.ToString("N0"))</div
            </div>
            <div class="navigation">
                <div class="buttoncontainer">
                    <button class="button @(IsJobsVisible ? "active" : "")" onclick="@DisplayJobs"> <i class="icon">work</i> Jobs </button>
                    <button class="button @(IsDarkWebVisible ? "active" : "")" onclick="@DisplayDarkWeb"> <i class="icon">store</i> Dark Web </button>
                    <button class="button @(IsPropsVisible ? "active" : "")" onclick="@DisplayProps"> <i class="icon">folder</i> Props </button> 
                </div>
                <div class="buttoncontainer">
                    <button class="button @(IsAdminVisible ? "active" : "")" onclick="@DisplayAdmin"> <i class="icon">local_police</i> Admin Tools </button>
                    <button class="button @(IsInfoVisible ? "active" : "")" onclick="@DisplayInfo"> <i class="icon">info</i> Information </button>
                    <button class="button" onclick=@GitHubLink style="color:#4078c0;"> <i class="icon">web</i> @GitHub </button>
                    <button class="button" onclick=@DiscordLink style="color:#7289da;"> <i class="icon">discord</i> @Discord </button>
                </div>
            </div>
        </div>
        <div class="main-container">
            <!-- Dark Web Section -->
            <div class="section" style="display: @(IsDarkWebVisible ? "flex" : "none");">
                <div class="section-title">Dark Web</div>
                <div class="section-contents">

                    <div class="button" onclick=@(() => BuyPrinter(PrinterType.Bronze, 500))>
                        <div class="icon" style="background-color: #A52A2A"></div>
                        <div class="label-container">
                            <div class="label">Bronze Printer</div>
                            <span class="description">@CurrentPrinter / @MaxPrinter</span>
                            <span class="description">Slow</span>
                            <div class="price">$500</div>
                        </div>
                    </div>

                    <div class="button" onclick=@(() => BuyPrinter(PrinterType.Silver, 1200))>
                        <div class="icon" style="background-color: #DCDCDC"></div>
                        <div class="label-container">
                            <div class="label">Silver Printer</div>
                            <span class="description">@CurrentPrinter / @MaxPrinter</span>
                            <span class="description">Average</span>
                            <div class="price">$1,200</div>
                        </div>
                    </div>

                    <div class="button" onclick=@(() => BuyPrinter(PrinterType.Gold, 2600))>
                        <div class="icon" style="background-color: #FFD700"></div>
                        <div class="label-container">
                            <div class="label">Gold Printer</div>
                            <span class="description">@CurrentPrinter / @MaxPrinter</span>
                            <span class="description">Fast</span>
                            <div class="price">$2,600</div>
                        </div>
                    </div>

                    <div class="button" onclick=@(() => BuyPrinter(PrinterType.Diamond, 4200))>
                        <div class="icon" style="background-color: #40E0D0"></div>
                        <div class="label-container">
                            <div class="label">Diamond Printer</div>
                            <span class="description">@CurrentPrinter / @MaxPrinter</span>
                            <span class="description">Super-fast</span>
                            <div class="price">$4,200</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Jobs Section -->
            <div class="section" style="display: @(IsJobsVisible ? "flex" : "none");">
                <div class="section-title">Jobs</div>
                <div class="section-contents">
                    @foreach (var job in new int[] { 1, 2, 3, 4, 5, 6, 7, 8 })
                    {
                        <div class="button">
                            <div class="icon"></div>
                            <div class="label-container">
                                <div class="label">Job @job</div>
                                <div class="description">Job @job description</div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- Props Section -->
            <div class="section" style="display: @(IsPropsVisible ? "flex" : "none");)">
                <div class="section-title">Props</div>
                <div class="section-contents">
                    <div class="info">

                        <span class="description" style="margin-top:10px; margin-bottom:20px;"> WORK IN PROGRESS </span>

                        <span class="description" style="margin-top:10px; margin-bottom:20px;">@CurrentProps / @MaxProps</span>


                        @foreach (var Model in Props)
                        {
                            string Propsname = Model.Name;
                            <div class="button" onclick=@(() => SpawnProps(Propsname))> @Model.Name </div>
                            // TODO :  add the thumbnail with the props name 

                        }

                        <!-- this doesn't work yet, it's supposed to show cloud assets but I struggle a bit to understand their API -->
                        @foreach (var Package in Packages)
                        {

                            <div class="button" onclick=> @Package.Title </div>

                        }

                    </div>
                </div>
            </div>

            <!-- Information Section -->
            <div class="section" style="display: @(IsInfoVisible ? "flex" : "none");">
                <div class="section-title">Information</div>
                <div class="section-contents">

                    <div class="info" style="color: #556B2F;">
                        <h1>Completed</h1>
                        <p>@InfoDone</p>
                    </div>
                    
                    <div class="info" style="color: #8B0000;">
                        <h1>TODO</h1>
                        <p>@InfoTodo</p>
                    </div>
                    
                    <div class="info" style="color: #DAA520;">
                        <h1>Notes</h1>
                        <p>@InfoNotes</p>
                    </div>
                    <div class="info" style="color: #DCDCDC;">
                        <h1>Credits</h1>
                        <p>@InfoCredits</p>
                    </div>

                </div>
            </div>

        <!-- Admin Section -->
        <div class="section" style="display: @(IsAdminVisible ? "flex" : "none");">
            <div class="section-title">Admin Tools</div>
            <div class="section-contents">
                <div class="info" style="color: red;">
                    <h1>TODO</h1>
                </div>
            </div>
        </div>
    </div>
    </div>
</root>

@code
{
    // Printer Prefab Reference
    [Property] GameObject PrinterPrefab { get; set; } 

    // Player Prefab Reference
    [Property] GameObject PlayerPrefab { get; set; } 

    // Prop Prefab Reference
    [Property] GameObject PropPrefab { get; set; } 

    // List of Props 
    [Property] public List<Model> Props { get; set; }

    // All the text property for the information tab
    [Property, TextArea] public string InfoDone { get; set; } = "Hello World!";
    [Property, TextArea] public string InfoTodo { get; set; } = "Hello World!";
    [Property, TextArea] public string InfoNotes { get; set; } = "Hello World!";
    [Property, TextArea] public string InfoCredits { get; set; } = "Hello World!";




    // The string used to query for packages 
    public string Query { get; set; } = "QuerryPlaceholder"; 

    // A list of found packages 
    List<Package> Packages = new List<Package>();

    // doesn't work yet ( I need to figure out their API to understand how to get a list of cloud Assets)
    public async Task FindPackage()
    {
        var found = await Package.FindAsync(Query);
        if (found != null)
        {
            Packages.AddRange(found.Packages);
        }
    }

    protected override async void OnStart()
    {
        FindPackage();
    }

    int MaxProps = 10;
    int CurrentProps = 0;


    // TODO :  add clear all props button + a way to interact with props 
    void SpawnProps(string modelname)
    {
        if (CurrentProps >= MaxProps)
        {
            Sound.Play("audio/error.sound");
            return;
        }

        // spawn the prop prefab
        Vector3 playerPos = GameObject.Parent.Transform.World.Position + GameObject.Parent.Transform.Local.Forward * 50;
        GameObject Prop = PropPrefab.Clone(playerPos);

        // Update the prop model
        Prop.Components.Get<PropLogic>().UpdatePropModel(modelname);

        // Update the prop Collider
        Prop.Components.Get<PropLogic>().UpdatePropCollider(modelname);
        
        // Spawn the prop on all clients
        Prop.NetworkSpawn();

        CurrentProps++;
    }


    // everything related to printers
    int MaxPrinter = 5;
    int CurrentPrinter = 0;
    enum PrinterType { Bronze, Silver, Gold, Diamond }

    // Generic method to purchase a printer
    void BuyPrinter(PrinterType type, float price)
    {
        if (CurrentPrinter >= MaxPrinter)
        {
            Sound.Play("audio/error.sound");
            return;
        }

        var playerStats = PlayerPrefab.Components.Get<PlayerStats>();
        if (!playerStats.RemoveMoney(price))
        {
            return; // Not enough money, error sound is handled elsewhere
        }

        Vector3 playerPos = GameObject.Parent.Transform.World.Position + GameObject.Parent.Transform.Local.Forward * 50;
        GameObject printer = PrinterPrefab.Clone(playerPos);

        // Set the printer type directly using a mapping if needed
        printer.Components.Get<PrinterLogic>().SetPrinterType((PrinterLogic.PrinterType)type);

        printer.NetworkSpawn(); // It spawns on all clients
        CurrentPrinter++;
    }


    // Boolean properties to control visibility
    bool IsDarkWebVisible = false, IsJobsVisible = false, IsInfoVisible = true, IsAdminVisible = false, IsPropsVisible = false;
    
    void DisplaySection(string section)
    {
        IsDarkWebVisible = section == "DarkWeb";
        IsJobsVisible = section == "Jobs";
        IsInfoVisible = section == "Info";
        IsAdminVisible = section == "Admin";
        IsPropsVisible = section == "Props";

        Sound.Play("audio/select.sound");
    }

    void DisplayDarkWeb() { DisplaySection("DarkWeb"); }
    void DisplayJobs() { DisplaySection("Jobs"); }
    void DisplayInfo() { DisplaySection("Info"); }
    void DisplayAdmin() { DisplaySection("Admin"); }
    void DisplayProps() { DisplaySection("Props"); }


    // Discord and Github string
    string Discord = "Discord";
    string GitHub = "GitHub";

    async void DiscordLink() { 
        Sound.Play("audio/select.sound");
        try{
            Clipboard.SetText("https://discord.gg/yBDk9Xr6VB");
            Discord = "Discord - Copied!";
            await Task.Delay(1500);
            Discord = "Discord";
            StateHasChanged();
        }catch{
            Log.Error("Failed to copy to clipboard");
        }
    }


    async void GitHubLink() { 
        Sound.Play("audio/select.sound");
        try{
            Clipboard.SetText("https://github.com/sousou63/DarkRP");
            GitHub = "GitHub - Copied!";
            await Task.Delay(1500);
            GitHub = "GitHub";
            StateHasChanged();
        }catch{
            Log.Error("Failed to copy to clipboard");
        }
    }
    /// <summary>
    /// The BuildHash method determines if the system should be rebuilt.
    /// If it changes, the system will be rebuilt.
    /// </summary>
    protected override int BuildHash() => System.HashCode.Combine(InfoDone, InfoTodo, InfoNotes);
}
