﻿@using Sandbox;
@using Sandbox.UI;
@using System;
@using Commands;
@inherits PanelComponent
@implements Component.INetworkListener

<root>
    @if (ChatOpen == true)
    {
        <div class="header">
            Chat
        </div>
    }
	<div class="output">
		@foreach (var entry in Messages)
        {
            // Only show the messages from the last 10 seconds, or all if the input box is focused
            @if (entry.timeSinceAdded < 10f || ChatOpen)
            {
                <div class="chat_entry">
                    <div class="timestamp">@entry.timestamp</div>
                    @if (DevSteamIDs.Contains(entry.steamid))
                    {
                        <div class="user-group">DEV</div>
                    }
                    @if (entry.steamid > 0)
                    {
                        <div class="avatar" style="background-image: url( avatar:@entry.steamid )"></div>
                    }
                    <div class="author">@entry.author</div>
                    <text class="message">@entry.message</text>
                </div>
            }
        }
	</div>

    <div class="input-container">
        @if (CommandSuggestions.Count > 0)
        {
            <div class="command-suggestions">
                @foreach (var command in CommandSuggestions)
                {
                    <div class="command">
                        @if (InputBox?.Value.Length > 1)
                        {
                            string inputValue = InputBox.Value.Substring(1).Split(' ')[0];
                    
                            if (inputValue.Length <= command.Length)
                            {
                                string remainingCommand = command.Substring(inputValue.Length);
                                <span style="color: white;">/@inputValue</span>
                                @if (remainingCommand.Length > 0)
                                {
                                    <span>@remainingCommand</span>
                                }
                            }
                            else
                            {
                                <span style="color: white;">/@(command)</span>
                            }
                        }
                        else
                        {
                            <span style="color: yellow;">/@(command)</span>
                        }
                    </div>
                }
            </div>
        }

        <div class="input">
            <TextEntry style="width:100%;" MaxLength=@(150) @ref="InputBox" onchange="@ChatChanged" onsubmit="@ChatFinished"></TextEntry>
        </div>
    </div>
</root>

@code
{


    // TODO temporary clout
    private static ulong[] DevSteamIDs = new ulong[] {
		76561198844028104, // Sousou
		76561198137204749, // QueenPM
	};

    TextEntry InputBox;
    bool ChatOpen = false;
    public record Entry(ulong steamid, string author, string message, RealTimeSince timeSinceAdded)
    {
        public bool IsNew { get; set; } = true;
        public string timestamp { get; } = DateTime.Now.ToString("HH:mm:ss");
    }
    public List<Entry> Messages = new();
    private ConfigManager ConfigManager;
    public List<string> CommandSuggestions = new();

    // ConfigManager is a helper class that allows us to register commands and other things
    GameObject GameControllerObject = null;
    protected override void OnStart()
    {
        try
        {
            /// Get the ConfigManager from the scene
            GameControllerObject = Scene.Directory.FindByName( "Game Controller").First() as GameObject;
            if (GameControllerObject == null)
            {
                Log.Error( "Config Manager not found" );
                return;
            }

            ConfigManager = GameControllerObject.Components.Get<ConfigManager>();
            if ( ConfigManager == null ) return;
            
        }catch (Exception e)
        {
            Log.Error( e.Message );
        }
    }

    protected override void OnUpdate()
    {
        if (InputBox is null)
            return;

        if ( Input.Pressed( "chat" ) )
        {
            ToggleChat(true);
        }

        // Clear the "new" flag after 10 seconds. This is to make sure we don't update chat state every frame
        foreach (var entry in Messages.Where(e => e.IsNew && e.timeSinceAdded > 10.0f))
        {
            entry.IsNew = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Opens and closes the Chat UI state.
    /// </summary>
    void ToggleChat(bool open)
    {
        ChatOpen = open;
        if (ChatOpen)
        {
            InputBox.Focus();
            InputBox.Placeholder = "Type /help for commands";
        }else {
            InputBox.Placeholder = "";
        }
        SetClass( "open", open );
        StateHasChanged();
    }

    void ChatChanged()
    {
        var text = InputBox.Text;
        // If chat starts with /, show command suggestions
        if (ConfigManager != null && text.StartsWith("/"))
        {
            var firstWord = text.Split(' ')[0];
            // Start suggesting commands
            CommandSuggestions = ConfigManager.Commands.GetCommandNames().Where( c => c.StartsWith( firstWord.Substring(1) ) ).ToList();
            StateHasChanged();
        }
        else
        {
            CommandSuggestions.Clear();
            StateHasChanged();
        }
    }

    /// <summary>
    /// Called when the user has finished typing a message in the chat
    /// </summary>
    void ChatFinished()
    {
        ToggleChat(false);
        CommandSuggestions.Clear();
        var text = InputBox.Text;
        InputBox.Text = "";

        if (string.IsNullOrWhiteSpace(text))
            return;

        if ( CheckForCommand(text) == true) return;
        NewUserMessage( text );
    }

    /// <summary>
    /// Sends a new message to broadcast to all clients
    /// </summary>
    [Broadcast]
    public void SendMessage( string message, bool system = false)
    {
        // Return if the message is empty
        if (string.IsNullOrWhiteSpace(message))
            return;


        var author = system ? "ℹ️" : Rpc.Caller.DisplayName;
        var steamid = system ? 0 : Rpc.Caller.SteamId;

        // If there are 30 messages, remove the oldest one
        if (Messages.Count > 30)
        {
            Messages.RemoveAt(0);
        }

        // Add the message to the chat
        Messages.Add(new Entry(steamid, author, message, 0.0f));
        StateHasChanged();
    }

    /// <summary>
    /// Sends a new message from a user to broadcast to all clients
    /// </summary>
    public void NewUserMessage( string message)
    {
        SendMessage( message, false );
	}

    /// <summary>
    /// Sends a new system message to broadcast to all clients
    /// </summary>
    public void NewSystemMessage( string message)
    {
        SendMessage( message, true );
    }

    @* void INetworkListener.OnDisconnected( Connection channel )
	{
        if ( IsProxy ) return;
		NewSystemMessage( $"{channel.DisplayName} has left the game." );
	}

    void INetworkListener.OnConnected( Connection channel )
	{
        if ( IsProxy ) return;
		NewSystemMessage( $"{channel.DisplayName} has joined the game." );
	} *@

    public void ClearChat()
    {
        Messages.Clear();
        StateHasChanged();
    }

    // Super basic commands for now. Expand later for more.
    // TODO Create a function to suggest commands as the user types. Giving arrow keys + tab controls to cycle through suggestions.
    public bool CheckForCommand(string message)
    {
        if (GameControllerObject == null) return false;
        if (ConfigManager == null) return false;
        if (message.StartsWith("/"))
        {
            var parts = message.Split(" ");
            var command = parts[0].Substring(1).ToLower();
            var args = parts.Skip(1).ToArray();
            try
            {
                var GameController = GameControllerObject.Components.Get<GameController>();
                if ( GameController == null ) return false;

                // Find the player executing the command
                var player = GameController.GetPlayerByConnectionID( Rpc.Caller.Id );
                if ( player == null ) return false;

                ConfigManager.Commands.ExecuteCommand(command,player.GameObject, Scene, args);
                return true;
            }catch (Exception e)
            {
                Log.Error( e.Message );
                return false;
            }
        }

        return false;
    }
}
